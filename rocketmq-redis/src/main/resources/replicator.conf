# address of zookeeper, the format is: ip1:port,ip2:port,ip3:port
zookeeper.address = 127.0.0.1:2181


# the uri of redis master which replicate from
# .e.g.
#   redis:///c:/path/to/appendonly.aof
#   redis:///c:/path/to/dump.rdb?verbose=yes
#   redis://host:port?ssl=yes&authPassword=yourredispassword
# query parameters @see org.apache.rocketmq.redis.replicator.Configuration
#   connectionTimeout
#   readTimeout
#   receiveBufferSize
#   sendBufferSize
#   retries
#   retryTimeInterval
#   bufferSize
#   authPassword
#   discardRdbEvent
#   asyncCachedBytes
#   rateLimit
#   verbose
#   heartBeatPeriod
#   useDefaultExceptionListener
#   ssl
#   replId
#   replOffset
redis.uri = redis://127.0.0.1:6379

# the address of rocketmq nameserver, the format is: ip1:port;ip2:port
rocketmq.nameserver.address = 127.0.0.1:9876

# the group name of rocketmq procuder. Different application should use unique group name
rocketmq.producer.groupname = redis_replicator_producer_group_name

# the instance name of rocketmq procuder. Different application should use unique instance name
rocketmq.producer.instancename = redis_replicator_producer_instance_name

# the topic which redis replication data is sent to
rocketmq.data.topic = redisdata

# the model of data/commands order.
# value includes:
#   "global" - sending all redis data/commands to a single queue of RMQ to guarantee global order
#   "partial" - sending RDB data to multi queue to consume concurrently, but sending commands in a single queue
order.model = global

# set deploy model.
# value includes:
#   "single" - only one replicator server, which is suitable for develop or test
#   "cluster" - a cluster that use master-slave model to keep a server alive at any time
deploy.model = single